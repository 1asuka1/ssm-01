<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
<!--  读取db.properties文件 -->
    <context:property-placeholder location="classpath:db.properties"/>
<!--    准备dataSource-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
<!--        配置连接属性-->
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
<!--将SqlSessionFactory交给spring来管理-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--    配置数据源属性 -->
        <property name="dataSource" ref="dataSource"></property>
<!--  配置mybatis配置文件属性-->
        <property name="configLocation" value="classpath:mybatis.xml"></property>
<!--        自动扫描mapper文件下所有的mapper.xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>
    <!--    将mapper交给spring管理 ，并创建代理-->
<!--mybatis-spring提供了MapperScannerConfigurer这个类，它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean  -->
    <bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--  会扫描com.gxa.mapper下的所有接口，然后创建各自接口的动态代理类。      -->
        <property name="basePackage" value="com.gxa.mapper"></property>
    </bean>
<!--扫描service，并创建bean-->
    <context:component-scan base-package="com.gxa.service"></context:component-scan>
    <!--引入shiro相关配置-->
    <import resource="spring_shiro.xml"/>
    <import resource="spring_tx.xml"/>

</beans>
