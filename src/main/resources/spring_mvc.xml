<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--扫描该包下的所有文件并注册为bean-->
    <context:component-scan base-package="com.gxa.controller"></context:component-scan>
    <context:component-scan base-package="com.gxa.exception"></context:component-scan>
<!--    &lt;!&ndash; 配置Thymeleaf视图解析器 &ndash;&gt;-->
<!--    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">-->
<!--        <property name="order" value="1"/>-->
<!--        <property name="characterEncoding" value="UTF-8"/>-->
<!--        <property name="templateEngine">-->
<!--            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">-->
<!--                <property name="templateResolver">-->
<!--                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">-->
<!--                        &lt;!&ndash; 视图前缀 &ndash;&gt;-->
<!--                        <property name="prefix" value="/WEB-INF/templates/"/>-->
<!--                        &lt;!&ndash; 视图后缀 &ndash;&gt;-->
<!--                        <property name="suffix" value=".html"/>-->
<!--                        <property name="templateMode" value="HTML5"/>-->
<!--                        <property name="characterEncoding" value="UTF-8" />-->
<!--                    </bean>-->
<!--                </property>-->
<!--            </bean>-->
<!--        </property>-->
<!--    </bean>-->
<!--  springmvc中的默认视图解析器-->
<!--  在视图逻辑名前面加上prefix,后面加上suffix  -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    <!--设置配置方案,提供Controller请求转发，json自动转换等功能-->
    <!--使用默认的Servlet来响应静态文件-->
    <mvc:annotation-driven/>
<!--    path=”/reg” 就是你访问的路径（相当于RequestMapping(“/hello”)）-->
<!--    view-name=”hello”是你所要的视图（如hello.jsp,相当于return “hello”）
配置了这个后对于/hello请求,就会直接交给dispatcherServlet,然后使用ViewResolver进行解析。-->
    <mvc:view-controller path="/index.html" view-name="index"></mvc:view-controller>
    <mvc:view-controller path="/center.html" view-name="center"></mvc:view-controller>
    <mvc:view-controller path="/emp/list.html" view-name="emp/list"></mvc:view-controller>
    <mvc:view-controller path="/main.html" view-name="main"></mvc:view-controller>
    <mvc:view-controller path="/emp/edit.html" view-name="emp/edit"></mvc:view-controller>
    <mvc:view-controller path="/role/roles.html" view-name="role/roles"></mvc:view-controller>
    <!--    解决静态资源拦截问题-->
    <mvc:resources mapping="/asserts/**" location="/asserts/"/>
    <!--启用了IOC容器中使用shiro的注解，但必须在配置了LifecycleBeanPostProcessor之后才能使用 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>

<!--    &lt;!&ndash;第一种方式：配置springmvc异常处理器&ndash;&gt;-->
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--        <property name="defaultErrorView" value="error"></property>-->
<!--      设置将异常信息共享在请求域中的键-->
<!--        <property name="exceptionAttribute" value="ex"></property>-->
<!--        <property name="exceptionMappings">-->
<!--            <props>-->
<!--                <prop key="ArithmeticException">arth</prop>-->
<!--                <prop key="IOException">IOEx</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--    </bean>-->
<!--    解决静态资源拦截问题-->
<!--     <mvc:interceptors>-->
<!--       <mvc:interceptor>-->
<!--           <mvc:mapping path="/**"/>-->
<!--           <mvc:exclude-mapping path="/index.html"/>-->
<!--           <mvc:exclude-mapping path="/login"/>-->
<!--           <bean class="com.gxa.interceptor.LoginInterceptor"/>-->
<!--       </mvc:interceptor>-->
<!--   </mvc:interceptors>-->
</beans>